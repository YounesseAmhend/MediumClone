{# comments.html.twig #}
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.css" rel="stylesheet">


<div class="max-w-4xl mx-auto px-4 py-8" id="comments-container">
    <div class="flex items-center justify-between mb-8">
        <div class="flex items-center gap-4">
            <h2 class="text-xl font-bold">Comments</h2>
            <span class="text-gray-600" id="comment-count">{{ comments|length }} comments</span>
        </div>
        <div class="flex gap-2">
            <select id="sort-comments" class="px-3 py-2 border rounded-md text-sm">
                <option value="newest">Newest First</option>
                <option value="oldest">Oldest First</option>
            </select>
        </div>
    </div>

    {% if app.user %}
        <div class="flex gap-4 mb-8">
            <img src="{{ app.user.avatarUrl|default(asset('images/default-avatar.jpg')) }}" 
                 alt="User avatar" 
                 class="w-10 h-10 rounded-full object-cover">
            <form id="comment-form" class="flex-1" data-post-id="{{ post.id }}">
                <div class="relative">
                    <textarea 
                        name="content" 
                        id="comment-content"
                        class="w-full px-4 py-2 border rounded-lg resize-none transition-all duration-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                        rows="3"
                        placeholder="Write a comment..."
                    ></textarea>
                    <div class="absolute bottom-2 right-2 flex gap-2">
                        <span id="char-count" class="text-sm text-gray-500">0/500</span>
                    </div>
                </div>
                <div class="mt-2 flex justify-end gap-2">
                    <button type="button" 
                            class="px-4 py-2 text-gray-600 rounded-md hover:bg-gray-100"
                            onclick="resetForm()">
                        Cancel
                    </button>
                    <button type="submit" 
                            class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:opacity-50"
                            disabled>
                        Comment
                    </button>
                </div>
            </form>
        </div>
    {% else %}
        <div class="bg-gray-50 rounded-lg p-4 mb-8 text-center">
            <p class="text-gray-600">Please <a href="{{ path('app_login') }}" class="text-blue-500 hover:underline">sign in</a> to leave a comment.</p>
        </div>
    {% endif %}

    <div class="space-y-6" id="comments-list">
        {% for comment in comments|reverse %}
            <div class="flex gap-4 comment-item" data-comment-id="{{ comment.id }}">
                <img src="{{ comment.userC.avatarUrl|default(asset('images/default-avatar.jpg')) }}" 
                     alt="{{ comment.userC.username }}" 
                     class="w-10 h-10 rounded-full object-cover">
                <div class="flex-1 relative">
                    <div class="flex items-center justify-between gap-2">
                        <div class="flex items-center gap-2">
                            <span class="font-medium">{{ comment.userC.username }}</span>
                            <span class="text-sm text-gray-500 comment-timestamp" 
                                  data-timestamp="{{ comment.timestamp|date('c') }}">
                                {{ comment.timestamp ? comment.timestamp|date('M d, Y h:i A') : '' }}
                            </span>
                        </div>
                        {% if app.user and app.user.id == comment.userC.id %}
                            <div class="relative">
                                <button class="text-gray-500 hover:text-gray-700 p-1 rounded-full hover:bg-gray-100" 
                                        onclick="toggleMenu(event, {{ comment.id }})">
                                    <span class="material-icons text-sm">more_vert</span>
                                </button>
                                <div id="comment-menu-{{ comment.id }}" 
                                     class="hidden absolute z-10 bg-white shadow-lg rounded-md mt-2 right-0 w-32 py-1">
                                    <button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center gap-2" 
                                            onclick="editComment({{ comment.id }})">
                                        <span class="material-icons text-sm">edit</span>
                                        Edit
                                    </button>
                                    <button class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100 flex items-center gap-2" 
                                            onclick="confirmDelete({{ comment.id }})">
                                        <span class="material-icons text-sm">delete</span>
                                        Delete
                                    </button>
                                </div>
                            </div>
                        {% endif %}
                    </div>
                    <div class="mt-1 comment-content">{{ comment.content }}</div>
                    <div class="edit-form hidden mt-2">
                        <textarea class="w-full px-4 py-2 border rounded-lg resize-none"></textarea>
                        <div class="mt-2 flex justify-end gap-2">
                            <button onclick="cancelEdit({{ comment.id }})" 
                                    class="px-3 py-1 text-sm text-gray-600 hover:bg-gray-100 rounded">
                                Cancel
                            </button>
                            <button onclick="saveEdit({{ comment.id }})" 
                                    class="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600">
                                Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>
    <div class="max-w-4xl mx-auto px-4 py-8" id="comments-container">
    <div id="delete-dialog" class="hidden fixed inset-0 bg-black/50 z-50 flex items-center justify-center">
    <meta name="csrf-token" content="{{ csrf_token('comment_token') }}">
        <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4 space-y-4">
            <h3 class="text-lg font-medium">Delete Comment</h3>
            <p class="text-sm text-gray-500">Are you sure you want to delete this comment? This action cannot be undone.</p>
            <div class="flex justify-end gap-3">
                <button 
                    onclick="closeDeleteDialog()"
                    class="px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 rounded-md"
                >
                    Cancel
                </button>
                <button 
                    id="confirm-delete-btn"
                    class="px-4 py-2 text-sm font-medium text-white bg-red-600 hover:bg-red-700 rounded-md"
                >
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.js"></script>
<script>
    let currentCommentId = null;
    const deleteDialog = document.getElementById('delete-dialog');
    
    function showDeleteDialog(commentId) {
        currentCommentId = commentId;
        deleteDialog.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
    }
    
    function closeDeleteDialog() {
        deleteDialog.classList.add('hidden');
        document.body.style.overflow = '';
    }
    
    window.confirmDelete = function(commentId) {
        showDeleteDialog(commentId);
    };
    
    document.getElementById('confirm-delete-btn').addEventListener('click', async function() {
        if (currentCommentId) {
            closeDeleteDialog();
            await deleteComment(currentCommentId);
        }
    });
    
    deleteDialog.addEventListener('click', function(e) {
        if (e.target === deleteDialog) {
            closeDeleteDialog();
        }
    });
    
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && !deleteDialog.classList.contains('hidden')) {
            closeDeleteDialog();
        }
    });
    
    function updateCommentInDOM(commentId, updatedComment) {
        const commentEl = document.querySelector(`[data-comment-id="${commentId}"]`);
        const contentEl = commentEl.querySelector('.comment-content');
        contentEl.textContent = updatedComment.content;
        this.cancelEdit(commentId);
    }
    window.deleteComment = async function(commentId) {
        const loadingToast = Toastify({
            text: "Deleting comment...",
            duration: -1, 
            gravity: "top",
            position: "right",
            backgroundColor: "#4B5563",
        }).showToast();

        try {
            const response = await fetch(`/api/comments/${commentId}`, {
                method: 'DELETE',
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                }
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to delete comment');
            }

            loadingToast.hideToast();
            removeCommentFromDOM(commentId);
            showToast('Comment deleted successfully');

        } catch (error) {
            console.error('Error deleting comment:', error);
            loadingToast.hideToast();
            showToast(error.message || 'Failed to delete comment', 'error');
        }
    };

    function removeCommentFromDOM(commentId) {
        const commentEl = document.querySelector(`[data-comment-id="${commentId}"]`);
        if (commentEl) {
            commentEl.remove();
            updateCommentCount(-1);
        }
    }
document.addEventListener('DOMContentLoaded', function() {
    const commentForm = document.getElementById('comment-form');
    const commentContent = document.getElementById('comment-content');
    const charCount = document.getElementById('char-count');
    const submitButton = commentForm?.querySelector('button[type="submit"]');
    const sortSelect = document.getElementById('sort-comments');
    let activeMenu = null;

    
    if (commentContent) {
        commentContent.addEventListener('input', function() {
            const length = this.value.length;
            charCount.textContent = `${length}/500`;
            
            if (length > 0 && length <= 500) {
                submitButton.disabled = false;
            } else {
                submitButton.disabled = true;
            }
        });
    }

    // Comment submission
    if (commentForm) {
        commentForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            const postId = this.dataset.postId;
            const content = commentContent.value;

            try {
                const response = await fetch('/api/comments', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': '{{ csrf_token('comment_token') }}'
                    },
                    body: JSON.stringify({ postId, content })
                });

                if (!response.ok) throw new Error('Failed to post comment');

                const newComment = await response.json();
                addCommentToDOM(newComment);
                resetForm();
                showToast('Comment posted successfully!');
                updateCommentCount(1);
            } catch (error) {
                showToast('Failed to post comment', 'error');
            }
        });
    }

    // Sort comments
    sortSelect?.addEventListener('change', function() {
        const commentsList = document.getElementById('comments-list');
        const comments = Array.from(commentsList.children);
        
        comments.sort((a, b) => {
            const timeA = new Date(a.querySelector('.comment-timestamp').dataset.timestamp);
            const timeB = new Date(b.querySelector('.comment-timestamp').dataset.timestamp);
            return this.value === 'newest' ? timeB - timeA : timeA - timeB;
        });

        commentsList.innerHTML = '';
        comments.forEach(comment => commentsList.appendChild(comment));
    });

    // Close menu when clicking outside
    document.addEventListener('click', function(e) {
        if (activeMenu && !activeMenu.contains(e.target)) {
            activeMenu.classList.add('hidden');
            activeMenu = null;
        }
    });

    // Toggle menu
    window.toggleMenu = function(event, commentId) {
        event.stopPropagation();
        const menu = document.getElementById(`comment-menu-${commentId}`);
        
        if (activeMenu && activeMenu !== menu) {
            activeMenu.classList.add('hidden');
        }
        
        menu.classList.toggle('hidden');
        activeMenu = menu.classList.contains('hidden') ? null : menu;
    };

    // Edit comment
    window.editComment = function(commentId) {
        const commentEl = document.querySelector(`[data-comment-id="${commentId}"]`);
        const contentEl = commentEl.querySelector('.comment-content');
        const editForm = commentEl.querySelector('.edit-form');
        const textarea = editForm.querySelector('textarea');

        contentEl.classList.add('hidden');
        editForm.classList.remove('hidden');
        textarea.value = contentEl.textContent.trim();
        textarea.focus();
    };

    // Cancel edit
    window.cancelEdit = function(commentId) {
        const commentEl = document.querySelector(`[data-comment-id="${commentId}"]`);
        const contentEl = commentEl.querySelector('.comment-content');
        const editForm = commentEl.querySelector('.edit-form');

        contentEl.classList.remove('hidden');
        editForm.classList.add('hidden');
    };

    // Save edit
    window.saveEdit = async function(commentId) {
        const commentEl = document.querySelector(`[data-comment-id="${commentId}"]`);
        const textarea = commentEl.querySelector('.edit-form textarea');
        const content = textarea.value.trim();

        try {
            const response = await fetch(`/api/comments/${commentId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': '{{ csrf_token('comment_token') }}'
                },
                body: JSON.stringify({ content })
            });

            if (!response.ok) throw new Error('Failed to update comment');

            const updatedComment = await response.json();
            updateCommentInDOM(commentId, updatedComment);
            showToast('Comment updated successfully!');
        } catch (error) {
            showToast('Failed to update comment', 'error');
        }
    };

     function resetForm() {
        if (commentForm) {
            commentContent.value = '';
            charCount.textContent = '0/500';
            submitButton.disabled = true;
        }
    }
    function addCommentToDOM(comment) {
        const commentsList = document.getElementById('comments-list');
        const sortSelect = document.getElementById('sort-comments');
        const template = document.createElement('div');
        
        template.className = 'flex gap-4 comment-item';
        template.dataset.commentId = comment.id;
        
        template.innerHTML = `
            <img src="${comment.user.avatarUrl || '/images/default-avatar.jpg'}" 
                 alt="${comment.user.username}" 
                 class="w-10 h-10 rounded-full object-cover">
            <div class="flex-1 relative">
                <div class="flex items-center justify-between gap-2">
                    <div class="flex items-center gap-2">
                        <span class="font-medium">${comment.user.username}</span>
                        <span class="text-sm text-gray-500 comment-timestamp" 
                              data-timestamp="${comment.timestamp}">
                            ${formatDate(comment.timestamp)}
                        </span>
                    </div>
                    <div class="relative">
                        <button class="text-gray-500 hover:text-gray-700 p-1 rounded-full hover:bg-gray-100" 
                                onclick="toggleMenu(event, ${comment.id})">
                            <span class="material-icons text-sm">more_vert</span>
                        </button>
                        <div id="comment-menu-${comment.id}" 
                             class="hidden absolute z-10 bg-white shadow-lg rounded-md mt-2 right-0 w-32 py-1">
                            <button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center gap-2" 
                                    onclick="editComment(${comment.id})">
                                <span class="material-icons text-sm">edit</span>
                                Edit
                            </button>
                            <button class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100 flex items-center gap-2" 
                                    onclick="confirmDelete(${comment.id})">
                                <span class="material-icons text-sm">delete</span>
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
                <div class="mt-1 comment-content">${comment.content}</div>
                <div class="edit-form hidden mt-2">
                    <textarea class="w-full px-4 py-2 border rounded-lg resize-none"></textarea>
                    <div class="mt-2 flex justify-end gap-2">
                        <button onclick="cancelEdit(${comment.id})" 
                                class="px-3 py-1 text-sm text-gray-600 hover:bg-gray-100 rounded">
                            Cancel
                        </button>
                        <button onclick="saveEdit(${comment.id})" 
                                class="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600">
                            Save
                        </button>
                    </div>
                </div>
            </div>
        `;

        if (sortSelect?.value === 'oldest') {
            commentsList.appendChild(template);
        } else {
            commentsList.insertBefore(template, commentsList.firstChild);
        }
    }

    function updateCommentCount(delta) {
        const countElement = document.getElementById('comment-count');
        const currentCount = parseInt(countElement.textContent);
        countElement.textContent = `${currentCount + delta} comments`;
    }

    function showToast(message, type = 'success') {
        Toastify({
            text: message,
            duration: 3000,
            "border-radius": "10px",
            gravity: "top",
            position: "right",
            backgroundColor: type === 'success' ? "#48BB78" : "#F56565",
        }).showToast();
    }

    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', {
            month: 'short',
            day: 'numeric',
            year: 'numeric',
            hour: 'numeric',
            minute: 'numeric',
            hour12: true
        });
    }
    // Helper functions

        }
        );</script>